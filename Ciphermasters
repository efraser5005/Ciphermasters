//CSCI 1100 Final Project
//Emma Carline and Esther Fraser present:
//CIPHERMASTERS
//December 2, 2014

//Imports
import java.util.Scanner;
import java.util.Random;
import javax.swing.JOptionPane;

public class FraserCarlineProject{
   public static void main(String[] args){
      
      Ciphermasters();

   }//end main method
   
   //This method contains the entire game of Ciphermasters.
   public static void Ciphermasters(){
   
      Scanner sc = new Scanner(System.in);
      
      Instructions();
      
      System.out.print("How many Ciphermasters are playing today? ");
      int numPlayers = sc.nextInt();
      
      String[] names = new String[numPlayers];
      int[] totalScore = new int[numPlayers];
      
      int level = 0;
      
      for(int i = 0; i < numPlayers; i++){
         System.out.print("Player " + (i + 1) + ", what is your name? ");
         names[i] = sc.next();
      }
      
      ChooseGame(totalScore, names);
 
   }
   
   /*This method controls the flow of the game. It calls one of the Letters game, 
   Numbers game,the Instructions method or the end-game (WrapUp) method */
   public static void ChooseGame(int[] totalScore, String[] names){
      
      Scanner sc = new Scanner(System.in);
      boolean again = true;
      
      int lettLev = 1, numbLev = 1;
      
      System.out.print("At what level would you like to start the letters code? ");
      lettLev = sc.nextInt();
      System.out.print("At what level would you like to start the numbers code? ");
      numbLev = sc.nextInt();
   
      while(again == true){
      
         String chooser = names[WhoChooses(totalScore)];
         
         System.out.print(chooser + ", which game would you like to play?" + 
               "\nEnter 1 for a letters code, 2 for a numbers code, 3 to read" + 
               " instructions and 0 to exit the game. ");
         int choice = sc.nextInt();
         
         if(choice == 1){
            System.out.println("You have chosen the letters code!");
            lettLev += LevelUp(Letters(totalScore,lettLev,names));
         }
         else if(choice == 2){
            System.out.println("You have chosen the numbers code!");
            numbLev = Numbers(numbLev, names, totalScore);
         }
         else if(choice == 3){
            Instructions();   
         }
         else if(choice == 0){
            again = false;
            WrapUp(names, totalScore);
         }
         else{
            System.out.println("I'm sorry. I don't recognize that command." + 
            " Please enter 1 for the letters code, 2 for the numbers code," +
            " 3 to read instructions or 0 to exit the game. ");
         }
      }
            
   }//end ChooseGame method
   
   /*This method plays the Letters game note: Method returns the score of a single
     game; Moving up a level does not happen within this method.*/
   public static int[] Letters(int [] totalScore, int level, String[] names){
      
      Scanner kb = new Scanner(System.in);
      boolean isTimeUp;
      int [] gameScore = new int[names.length];
      
      //Sets the number of letters in the anagram according to the level.
      //note: The number of letters never exceeds 10.
      int numLets;
      if (level < 24){
         numLets = level/3 + 2;
      }
      else {
         numLets = 10;
      }
         
      //Each player will have the chance to choose the anagram word.
      /*On a given player's turn, after the time is up, the rest of the players
         are randomly selected to enter their answers.*/
      //Answers are checked and score is immediately displayed.
      for (int i=0; i<names.length; i++){
          String word = JOptionPane.showInputDialog(names[i] +
            ", it's your turn. Please enter a " +
            numLets + "-letter word:");
         while (word.length()!=numLets){           //word must have correct number of letters
            word = JOptionPane.showInputDialog("Your word must have " + 
               numLets + " letters. \nPlease try again:");
         }
         word = areAllLetts(word);               //word must be all letters
         String drow = Scramble(word);
         System.out.println("Okay everyone. The anagram is: " + drow); 
         isTimeUp = Timer("letters",level);
         int [] inputOrder = RandPlayerOrder(names.length);
         if(isTimeUp){
            for (int m=0; m<names.length; m++){
               if (inputOrder[m]!= i){
                  String ans = JOptionPane.showInputDialog(names[inputOrder[m]]+
                     ", please enter your answer:");
                  if (ans.equals(word)){
                     gameScore[inputOrder[m]]++;
                  }
                  System.out.println("Score of " + names[m] + " is " 
                     + gameScore[m]);
               }
            }
         }
         if (i+1!=names.length){
            JOptionPane.showMessageDialog(null,"This round is finished." +
            " Get ready " + names[i+1] + " to enter a word to be scrambled!");
         }
         //Prints everyone's scores at end of game.
         else {
            JOptionPane.showMessageDialog(null,"This game is finished." +
            " The scores are:\n" + printArrList(gameScore, names)); 
         }
         //Updates totalScore.
         for (int h=0; h<gameScore.length; h++){
            totalScore[h] += gameScore[h];
         }
      }
      return gameScore; 
   }
   
   /*Is word only letters method
   Checks that entered word is only letters
   If not, gets user to enter another word
   Continues until a word is entered that only contains letters*/
   public static String areAllLetts(String word){  
      Scanner kb = new Scanner(System.in);
      boolean nonLet = true;
      while (nonLet==true){
         nonLet = false;
         for (int m=0; m<word.length();m++)
            if (Character.isLetter(word.charAt(m))==false)
               nonLet=true;
         if (nonLet == true)
            word = JOptionPane.showInputDialog("You must enter a word." +
            " \nTry again:"); 
      }
      return word;
   }
   
   //Scramble method
   //Takes in a string, reorders the letters
    public static String Scramble(String word){
      char [] letArray = new char[word.length()];
      for (int i=0; i < word.length(); i++){
         letArray[i]= word.charAt(i);
      }
      Random rnd = new Random();
      int numSwaps = rnd.nextInt(20);
      for (int i=0; i<=numSwaps; i++){
         int leng = word.length();
         if (leng>0){
            int a = rnd.nextInt(leng);
            int b = rnd.nextInt(leng);
            char c = letArray[a];
            letArray[a] = letArray[b];
            letArray[b] = c; 
         }
      }
      String scrambled;
      scrambled = "";
      for (int i=0; i<letArray.length; i++){
         scrambled = scrambled + letArray[i];
      }
      return scrambled;
   }
   
   /*This is the Timer. 
   The amount of time allowed depends on which game is being played and the 
   level. Returns the boolean value true, after the amount of time has passed*/
   public static boolean Timer(String game, int level){ 
      boolean isTimeUp = false;
      
      int playtime = 0; 
      int [] letlev = {30, 60, 40};
      int [] numblev = {40, 80, 60, 60};
      
      if(game.equals("letters")){ 
         playtime = letlev[(level)%3];
      }
      else if(game.equals("numbers")){
         playtime = numblev[(level)%4];
      }
      
      System.out.println("You have " + playtime + " seconds. Ready...set...GO!"); 
      long start = System.currentTimeMillis();
      long i=0;
      while (i <= start + playtime * 1000){
         i=System.currentTimeMillis();
      }
      if(i == 1 + start + playtime * 1000){
         isTimeUp = true;
         System.out.println("Time is up!");
      }
      
      return isTimeUp;  
   }
     
   /*Random Player order method
   Creates array with numbers from 1 to numPlayers
   Shuffles the elements and returns the array*/
   public static int[] RandPlayerOrder(int numPlayers){
      int [] playArr = new int[numPlayers];
      for (int i=0; i < numPlayers; i++)
         playArr[i]= i;
      Random rnd = new Random();
      int numSwaps = rnd.nextInt(20);
      for (int i=0; i<numSwaps; i++){
         int a = rnd.nextInt(numPlayers);
         int b = rnd.nextInt(numPlayers);
         int c = playArr[a];
         playArr[a] = playArr[b];
         playArr[b] = c; 
      }
      return playArr;
   }
  
   //Display scores method.
   //For each player, prints player's name followed by ":" and their score.
    public static String printArrList(int[] gamescore, String [] names){
      String scoreList = "";
      for (int k=0; k<gamescore.length; k++){
         scoreList = scoreList + names[k] + ": " + (gamescore[k] + "\n");
      }
      return scoreList;
   }
   
   /*Who chooses next game method
   Gives the index in names[] of the person who gets to
   choose which type of game is played next*/
   public static int WhoChooses(int [] score){
      int count = 0;
      int min = score[0];
      
      //Finds minimum score.
      for(int i = 0; i < score.length; i++){
         if(score[i] < min){
            min = score[i];
         }
      }
      
      //Counts the number of players with the minimum score/
      for (int j=0; j<score.length; j++){
         if (score[j] == min){
            count++;
         }
      }
      
      //Creates new array, Losers[].
      //Holds the indexes in names[] of the players with min score.
      int [] Losers = new int [count];
      int newCount = 0;
      for (int k = 0; k<score.length; k++){
         if (score[k] == min){
            Losers[newCount] = k;
            newCount++;
         }
      }
      //Randomly choses a person in Losers[].
      Random rnd = new Random();
      int index = rnd.nextInt(Losers.length);
      int who = Losers[index];
      return who;
   }
   
   /*LevelUp method (for Letters)
   Level increases if more than 80% of the players guess*/ 
   public static int LevelUp(int [] gameScore){
      int level = 0;
      double average = 0;
      double sumScores = 0;
      for (int j=0; j<gameScore.length; j++){
         sumScores = sumScores + gameScore[j];
      }
      average = sumScores/(gameScore.length -1)/(gameScore.length-1);
      if (average > 0.8){
         System.out.println("Great work with those anagrams, code-breakers!" +
                "Let's move to the next level!");
         level = 1;
      }
      else if (average > 0.5){
         System.out.println("Well done. Let's practice some more anagrams like" +
               " this.");
         level = 0;
      }
      else {
         System.out.println("Let's try some more practice anagrams," +
               " code-breakers, before tackling a code this tough again.");
         level = -1;
      }
      return level;
   }
   
    //This method plays the Numbers game
   public static int Numbers(int level, String[] names, int[] totalScore){
      
      int gameScore = 0; 
      boolean isTimeUp;     
      int numSmall = 0, numLarge = 0;
      int[] larges = {25, 50, 75, 100};
      
      Random rnd = new Random();
      Scanner sc = new Scanner(System.in);
      
      //Sets number of small numbers by level
      if(level < 5){
         numSmall = 2;
      }
      else if(level < 10){
         numSmall = 3;
      }
      else if(level < 15){
         numSmall = 4;
      }
      else if(level < 20){
         numSmall = 5;
      }
      
      int[] numbers = new int[(level+23)/4];
      
      System.out.print("The numbers are: ");
      
      //adds random ints less than 10 to the array "numbers" 
      for(int i = 0; i < numSmall; i++){
         numbers[i] = rnd.nextInt(9) + 1;
         System.out.print(numbers[i] + " ");
      }
      
      for(int i = numSmall; i < numbers.length; i++){
         numbers[i] = larges[rnd.nextInt(4)];
         System.out.print(numbers[i] + " ");
      }
      
      //This scrambles the order of the numbers, making the puzzle more challenging.
      NumberScramble(numbers);
      
      //randomly generates operations to link the numbers and create target number
      int[] operations = new int[5];
      int target = 0;
      
      for(int i = 0; i < 5; i++){
         operations[i] = rnd.nextInt(3) + 1;
         if(operations[i] == 1){
            target += numbers[i];
         }
         else if(operations[i] == 2 && (level % 4 == 0 || level % 4 == 3)){
            if(target > numbers[i]){      //This ensures target stays positive
               target -= numbers[i];
            }
            else{
               target += numbers[i];
            }
         }
      }
      //Informs players if subtraction is needed, based on level
      if(level % 4 == 0 || level % 4 == 3){
         System.out.println("\nTry to crack the code by adding or subtracting" +
            "these numbers until you reach the target. You can use each number only once.");
      }
      else{
         System.out.println("\nTry to crack the code by adding some of these numbers until " + 
            "you reach the target. You can use each number only once.");
      }
      System.out.println("The target number is: " + target);
      
      isTimeUp = Timer("numbers", level);
      
      String[] answers = new String[names.length];
      
      if(isTimeUp){
         for(int i = 0; i < names.length; i++){
            System.out.print(names[i] + ", how did you crack the code? Please enter the " +
               "arithmetical expression you used: ");
            answers[i] = sc.nextLine();
            //Checks the arithmetic of the player's answer
            int playerAnswer = ReadAndCheck(answers[i], totalScore[i]);
            
            //Determine's the player's score based on their answer, then updates the array of total scores.
            int playerScore = ScoreNumbers(names[i], playerAnswer, target);
            totalScore[i] += playerScore;
            gameScore += playerScore;
         }
      }      
      //levels up, if the players do well enough
      if(gameScore > 3*(names.length - 1)){
         level++;
         System.out.println("Great work on that code, code-breakers! You've moved up to level " + level);
      }
      else if(gameScore == 0){
         level--;
         System.out.println("Let's do some more practice before we tackle this code again, code-breakers." + 
             "We'll move to level " + level);
      }
      
      return level;
      
   }//end Numbers method
   
   //The following methods (until the WrapUp method) are all called only by the Numbers game
   
   //This method is called early in the Numbers method to scramble the order of the numbers in the array. 
   //It makes the puzzle more challenging.
   public static void NumberScramble(int[] nums){
      Random rnd = new Random();
      int numSwaps = rnd.nextInt(20);
      for (int i=0; i<=numSwaps; i++){
         int leng = nums.length;
         if (leng>2){
            int a = rnd.nextInt(leng);
            int b = rnd.nextInt(leng);
            int c = nums[a];
            nums[a] = nums[b];
            nums[b] = c; 
         }
      }
   }//end NumberScramble method

   //This method reads the player's answer and checks their arithmetic. It's called by the Numbers method.
   public static int ReadAndCheck(String answer, int score){
      Scanner sc = new Scanner(System.in);
      
      int charPos = answer.length() - 1;
      int[] ansNums = new int[answer.length()];
      int[] ansOps = new int[answer.length()];
         
         while(charPos >= 0){       //for each player's answer, runs through their answer string backwards
            
            //The first three cases handle the operators, adding them to an array called ansOps         
            if(answer.charAt(charPos) == '+'){
               ansOps[charPos] = 1;
               charPos--;
            }
            else if(answer.charAt(charPos) == '-'){
               ansOps[charPos] = 2;
               charPos--;
            }
            //This case handles the numbers
            else if(Character.isDigit(answer.charAt(charPos))){
               int ansHunds = 0, ansTens = 0, ansUnits = 0;
               
               //These two nested "if"s handle the cases where the number is 2 or 3 digits long
               if(charPos > 0 && Character.isDigit(answer.charAt(charPos-1))){
                  
                  if(charPos > 1 && Character.isDigit(answer.charAt(charPos-2))){
                     ansHunds = Character.getNumericValue(answer.charAt(charPos-2));
                  }
                  
                  ansTens = Character.getNumericValue(answer.charAt(charPos-1));
               }
               
               ansUnits = Character.getNumericValue(answer.charAt(charPos));
               
               ansNums[charPos] = ansHunds * 100 + ansTens * 10 + ansUnits;
               //These "if"s move the charPos to avoid double-counting 2- and 3- digit numbers
               if(ansHunds != 0){
                  charPos -=3;
               }
               else if(ansTens != 0){
                  charPos -=2;
               }
               else{
                  charPos--;
               }
                              
               ansHunds = 0; ansTens = 0;
            }
            //This handles the case where something other than a number of valid operator has been entered. 
            //It prompts the user to re-enter their answer. 
            else{
               System.out.print("Error: " + answer.charAt(charPos) + " is an invalid character. " +
                  "You won't get any points this round.");
            }
         }

      int total = ansNums[0];
      int nextNum = 0;
      int counterNums = 0;
      int counterOps = 0;
      
      if(ansOps[0] != 2){
         for(int i = 0; i < ansNums.length; i++){
            if(total == 0){
               total = ansNums[i];
               counterNums = i +1;
            }
            else if(i == 0){
               counterNums = i+1;
            }
         }
      } 

      while(counterOps < ansOps.length){
         
         while(counterNums < ansNums.length && counterOps < ansOps.length){
            
            if(ansNums[counterNums] == 0){ //advances the counter past "0" entries
               counterNums++;
            }
            else{
               nextNum = ansNums[counterNums];
            
               if(ansOps[counterOps] == 0){
                  counterOps++;
               }               
               else if(ansOps[counterOps] == 1 ){
                  total += nextNum;
                  counterNums++;                 
                  counterOps++;
               }  
               else if(ansOps[counterOps] == 2){
                  total -= nextNum;
                  counterNums++;
                  counterOps++;
               }
            }
         }
         counterOps++;
      
      }
      return total;
   }//ends ReadAndAdd method
   
   //This method scores the Numbers game.
   public static int ScoreNumbers(String name, int target, int answer){
      int gameScore = 0;
      
      if(answer == target){
         gameScore = 3;
         System.out.println("Great work, " + name + ", you cracked the code! You get 3 points.");
      }
      else if(answer > (target - 10) && answer < (target + 10)){
         gameScore = 1;
         System.out.println("Not bad, " + name + ", you nearly got it. You get 1 point.");
      }
      else{
         System.out.println("You didn't manage to crack the code. You'll do better next time.");
      }
      
      return gameScore;
   }//ends the ScoreNumbers method

   
   //This method is called when the players choose to end the game. 
         //It prints every player's score and determines and congratulates the winner(s).
   public static void WrapUp(String[] names, int[] totalScore){
      System.out.println("Good game, code-breakers! Here are your final socres: ");
      //This section finds the winner
      int max = totalScore[0];
      String[] winner = new String[names.length];
      
      for(int i = 0; i < totalScore.length; i++){
         if(totalScore[i] >= max ){
            winner[i] = names[i];
         }
      }
      //This section tells each player their socre
      for(int i = 0; i < names.length; i++){
         System.out.println(names[i] + ", you scored " + totalScore[i] + " points.");
      }
      //This section congratulates the winner(s)
      System.out.print("Congratulations ");
      for(int i = 0; i < winner.length; i++){
         if(!(winner[i] == null)){
            System.out.print(winner[i] + ", ");
         }
      }
      System.out.println("you are a Ciphermaster!");
      Credits();
      
   }//end WrapUp method
   
   //This method just prints a whole bunch of text wherein we thank people.
   public static void Credits(){
      System.out.println("/nCiphermasters was created by Emma Carline and Esther Fraser " +
         "in partial fulfillment of the requirements of" +
         "\nDalhousie University's first year Computer Science class. " +
         "The creators would like to thank Dr. B. McKay" +
         "\nfor teaching them nearly everything they know about Java so far and inspiring them " +
         "to learn the rest on \ntheir own. Ciphermasters is based on the TV5 game show " + 
         "Des Chiffres et des Lettres (now with English versions," +
         "\nthe BBC's Countdown and ABC's Letters and Numbers. We hope you've enjoyed playing Ciphermasters!");
  }


   //This method prints the instructions
   public static void Instructions(){
      JOptionPane.showMessageDialog(null, "In Ciphermasters, you and your friends are code-making " +
         "and code-breaking secret agents" + 
         " in a high-stakes race against time." + 
         "\nTake turns hiding top secret information in the lettersgame, then go head-to-head against " +
         "the Computer as you try to break through its security system.");
      JOptionPane.showMessageDialog(null, "In the letters game, one player will enter a word." + 
         "\n(This is top-secret! Don't let the other players see it!) " +
         "\nThen everyone will be shown a scrambled version of this word, called an anagram. " +
         "\nUnscramble the anagram before time runs out." +  
         "\nEach player will then enter their guess." + 
         "\nThe game ends when each player has had a turn choosing the anagram." +
         "\nOne point is given for each word correctly unscrambled. " +
         "\nAs the levels get harder, the anagrams will get longer and you'll have less time to decode them!");
      JOptionPane.showMessageDialog(null, "In the numbers game, all players are shown six" +
         " 'building' numbers and a target number."+
         "\nPlayers add and subtract the building numbers to try to reach the target." +
         "\nWhen the timer runs out, each player enters their solution: the numbers and" +
         " the operations they used to reach the target number."+
         "\nEach player gets 3 points for getting the target number exactly and 1 point " +
         "for getting within 10 of the target." +
         "\nCareful, in some levels, you might need to subtract!");
   }

   
}//end class
