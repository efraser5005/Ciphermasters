//This this the main game file for Ciphermasters. It does everything!

//Imports
import java.util.Scanner;
import java.util.Random;
import javax.swing.JOptionPane;

public class Ciphermasters{
   public static void main(String[] args){
      
      int[] totalScore = StartUp();
      
      
      for(int i = 0; i < totalScore.length; i++){
         System.out.print("Player " + (i + 1) + "'s score is: " + totalScore[i]);
      }
   }//end main method
   
   //This method initializes a bunch of stuff for the game
   public static int[] StartUp(){
   
      Scanner sc = new Scanner(System.in);
      
      Instructions();
      
      System.out.print("How many Ciphermasters are playing today? ");
      int numPlayers = sc.nextInt();
      String[] names = new String[numPlayers];
      int[] totalScore = new int[numPlayers];
      int level = 0;
      
      for(int i = 0; i < numPlayers; i++){
         System.out.print("Player " + (i + 1) + ", what is your name? ");
         names[i] = sc.next();
      }
      
      for(int i = 0; i < numPlayers; i++){
         System.out.print(names[i] + ", ");
      }
      
      System.out.println();

      /*This is for testing that score updating is working properly
      for(int i = 0; i < numPlayers; i++){
         System.out.print("Player " + (i+1) + "'s score is: " + totalScore[i]);
      }*/
      
      ChooseGame(totalScore, level);
      
      /* This is for testing that score updating is working properly
      for(int i = 0; i < numPlayers; i++){
         System.out.print("Player " + (i+1) + "'s score is: " + totalScore[i]);
      }*/

      return totalScore;   
   }
   
   //This method prompts the players to choose which game to play and starts that game
   public static void ChooseGame(int[] totalScore, String[] names){
      
      Scanner sc = new Scanner(System.in);
      boolean again = true;
      
      int lettLev = 1;
      int numbLev = 1;
   
      while(again == true){
      
         String chooser = names[WhoChooses(totalScore)];
         
         System.out.print(chooser + ", which game would you like to play?" + 
               "/nEnter 1 for the letters game, 2 for the numbers game, 3 to read instructions and 0 to exit the game. ");
         int choice = sc.nextInt();
         
         if(choice == 1){
            System.out.println("You have chosen the letters game!");
            Letters(lettLev, names);
            for(int i = 0; i < names.length; i++){
               totalscore[i] += gamescore[i];
            }
            lettLev = LevelUp(Letters);
         }
         else if(choice ==2){
            System.out.println("You have chosen the numbers game!");
            numbLev = Numbers(numbLev, names, totalScore);
         }
         else if(choice == 3){
            Instructions();   
         }
         else if(choice == 0){
            again = false;
            WrapUp();
         }
         else{
            System.out.println("I'm sorry. I don't recognize that command. Please enter 1 for the letters game, 2 for the numbers game, 3 to read instructions or 0 to exit the game. ");
         }
      }
   
   }//end ChooseGame method
   
   public static int[] Letters(int level, String[] names){
      
      Scanner kb = new Scanner(System.in);
      int [] gameScore = new int[names.length];
      for (int i=0; i<names.length; i++){
         int time = 60 - 15*((level-1)%3);
         int numLets;
         if (level < 10)
            numLets = level/3 + 2;
         else
            numLets = 9;
         String word = JOptionPane.showInputDialog(names[i] +
            ", it's your turn. Please enter a " +
            numLets + "-letter word:");
         while (word.length()!=numLets)
            word = JOptionPane.showInputDialog("Your word must have " + 
               numLets + " letters. \nPlease try again:");
         word = areAllLetts(word);
         String drow = Scramble(word);
         System.out.println("Okay everyone. The anagram is: " + drow + 
            "\nYou have " + time + " seconds to unscramble the word."); 
         Timer("letters",level);
         int [] inputOrder = RandPlayerOrder(names.length);
         for (int m=0; m<names.length; m++){
            if (inputOrder[m]!= i){
               String ans = JOptionPane.showInputDialog(names[inputOrder[m]]+
                  ", please enter your answer:");
               if (ans.equals(word)){
                  gameScore[inputOrder[m]]++;
               }
               System.out.println("Score of " + names[m] + " is " + gameScore[m]);
            }
         }
         if (i+1!=names.length){
            JOptionPane.showMessageDialog(null,"This round is finished. Get ready " + names[i+1] + 
            " to enter a word to be scrambled!");
         }
         else {
            JOptionPane.showMessageDialog(null,"This game is finished. The scores are:\n" + 
               printArrList(gameScore, names)); 
         }
      }
      return gameScore; 
   }
//Is word only letters method
   //Checks that entered word is only letters
   //If not, gets user to enter another word
   //Continues until a word is entered that only contains letters
   public static String areAllLetts(String word){  
      Scanner kb = new Scanner(System.in);
      boolean nonLet = true;
      while (nonLet==true){
         nonLet = false;
         for (int m=0; m<word.length();m++)
            if (Character.isLetter(word.charAt(m))==false)
               nonLet=true;
         if (nonLet == true)
            word = JOptionPane.showInputDialog("You must enter a word. \nTry again:"); 
      }
      return word;
   }
   
   //Scramble method
   //Takes in a string, reorders the letters
    public static String Scramble(String word){
      char [] letArray = new char[word.length()];
      for (int i=0; i < word.length(); i++){
         letArray[i]= word.charAt(i);
      }
      Random rnd = new Random();
      int numSwaps = rnd.nextInt(20);
      for (int i=0; i<=numSwaps; i++){
         int leng = word.length();
         if (leng>0){
            int a = rnd.nextInt(leng);
            int b = rnd.nextInt(leng);
            char c = letArray[a];
            letArray[a] = letArray[b];
            letArray[b] = c; 
         }
      }
      String scrambled;
      scrambled = "";
      for (int i=0; i<letArray.length; i++){
         scrambled = scrambled + letArray[i];
      }
      return scrambled;
   }
   
   //Timer method 
   //Amount of counting depends on which game and level
      public static void Timer(String game, int level){ 
      int playtime = 0; 
      int [] letlev = {60, 45, 30};
      int []numblev = {70,60,50,40,30};
      if (game.equals("letters")) 
         playtime = letlev[(level)%3];
      else if (game.equals("numbers"));
         playtime = numblev[(level)%5]; 
      long start = System.currentTimeMillis();
      long i=0;
      while (i <= start+30000){
         i=System.currentTimeMillis();
         i++;
      }
      System.out.println("Time is up!");  
   }
     
     //Random Player order method
     //Creates array with nums from 1 to numPlayers
     //Shuffles the elements and returns the array
     public static int[] RandPlayerOrder(int numPlayers){
      int [] playArr = new int[numPlayers];
      for (int i=0; i < numPlayers; i++)
         playArr[i]= i;
      Random rnd = new Random();
      int numSwaps = rnd.nextInt(20);
      for (int i=0; i<numSwaps; i++){
         int a = rnd.nextInt(numPlayers);
         int b = rnd.nextInt(numPlayers);
         int c = playArr[a];
         playArr[a] = playArr[b];
         playArr[b] = c; 
      }
      return playArr;
   }
  
   //display scores method
   //prints Player : [gameSCore[player]] for all players in the array
    public static String printArrList(int[] gamescore, String [] names){
      String scoreList = "";
      for (int k=0; k<gamescore.length; k++){
         scoreList = scoreList + names[k] + ": " + (gamescore[k] + "\n");
      }
      return scoreList;
   }
   
  // Who chooses next game method
  //gives the index in names[] of the person who gets to choose which game is played next
   public static int WhoChooses(int [] score){
      int count = 0;
      int min = score[0];
      
      for(int i = 0; i < score.length; i++){
         if(socre[i] < min){
            min = score[i];
      }
      
      for (int j=0; j<score.length; j++){
         if (score[j] == min){
            count++;
         }
      }
      int [] Losers = new int [count];
      int newCount = 0;
      for (int k = 0; k<score.length; k++){
         if (score[k] == min){
            Losers[newCount] = k;
            newCount++;
         }
      }
      Random rnd = new Random();
      int index = rnd.nextInt(Losers.length);
      int who = Losers[index];
      return who;
   }
   
   //LevelUp method
   public static int LevelUp(int [] gameScore){
      int level = 0;
      double percentRight = 0;
      double sumScores = 0;
      for (int j=0; j<gameScore.length; j++){
         sumScores = sumScores + gameScore[j];
      }
      percentRight = sumScores/gameScore.length;
      if (percentRight > 0.8){
         level = 1;
      }
      return level;
   }


   
   
   //This method plays the Numbers game
   public static int Numbers(int level, String[] names, int[] totalScore){
            
      int numSmall = 0, numLarge = 0;
      int[] larges = {25, 50, 75, 100};
      
      Random rnd = new Random();
      Scanner sc = new Scanner(System.in);
      
      //Sets number of small numbers by level
      if(level % 3 == 1){
         numSmall = 2;
      }
      else if(level % 3 == 2){
         numSmall = 3;
      }
      else if(level % 3 == 3){
         numSmall = 4;
      }
      else{
         System.out.println("Esther, you've screwed it up! The level is set to something other than 1, 2 or 3. How did that happen?");
      }
      
      int[] numbers = new int[6];
      
      System.out.print("The numbers are: ");
      
      //adds random ints less than 10 to the array "numbers" 
      for(int i = 0; i < numSmall; i++){
         numbers[i] = rnd.nextInt(9) + 1;
         System.out.print(numbers[i] + " ");
      }
      
      for(int i = numSmall; i < 6; i++){
         numbers[i] = larges[rnd.nextInt(4)];
         System.out.print(numbers[i] + " ");
      }
      
      //This scrambles the order of the numbers, making the puzzle more challenging.
      NumberScramble(numbers);
      
      //randomly generates operations to link the numbers and create target number
      int[] operations = new int[5];
      int target = 0;
      
      for(int i = 0; i < 5; i++){
         operations[i] = rnd.nextInt(4) + 1;
         if(operations[i] == 1){
            target += numbers[i];
            //System.out.println("The number is: " + numbers[i] + ". The operation is: + . The target is now: " + target);
         }
         else if(operations[i] == 2){
            if(target > numbers[i]){ //This ensures target stays positive
               target -= numbers[i];
               //System.out.println("The number is: " + numbers[i] + ". The operation is: - . The target is now: " + target);
            }
            else{
               target += numbers[i];
               //System.out.println("The number is: " + numbers[i] + ". The operation is: +. The target is now: " + target);
            }
         }
      }
      
      System.out.println("The target number is: " + target);
      
      System.out.println("Time's up!"); //This is in place of the timer method for now
      
      String[] answers = new String[names.length];
      
      for(int i = 0; i < names.length; i++){
         System.out.print(names[i] + ", how did you crack the code? Please enter the arithmetical expression you used: ");
         answers[i] = sc.nextLine();
         //Checks the arithmetic of the player's answer
         int playerAnswer = ReadAndCheck(answers[i], totalScore[i]);
         //System.out.println("The player's answer is " + playerAnswer);
         //System.out.println("The target number is " + target);
         
         //Determine's the player's score based on their answer, then updates the array of total scores.
         int playerScore = ScoreNumbers(names[i], playerAnswer, target);
         totalScore[i] += playerScore;
      }
      
      //levels up, if the players do well enough
      if(gameScore > 3*(names.length - 1) + 1){
         level++;
      }
      
      return level;
      
   }//end Numbers method
   
   //The following methods (until the WrapUp method) are all called by the Numbers game
   
   //This method is called early in the Numbers method to scramble the order of the numbers in the array. It makes the puzzle more challenging.
   public static void NumberScramble(int[] nums){
      Random rnd = new Random();
      int numSwaps = rnd.nextInt(20);
      for (int i=0; i<=numSwaps; i++){
         int leng = nums.length;
         if (leng>2){
            int a = rnd.nextInt(leng);
            int b = rnd.nextInt(leng);
            int c = nums[a];
            nums[a] = nums[b];
            nums[b] = c; 
         }
      }
   }//end NumberScramble method

   //This method reads the player's answer and checks their arithmetic. It's called by the Numbers method.
   public static int ReadAndCheck(String answer, int score){
      int charPos = answer.length() - 1;
      int[] ansNums = new int[answer.length()];
      int[] ansOps = new int[answer.length()];
         
         while(charPos >= 0){          //for each player's answer, runs through their answer string backwards
            
            //The first three cases handle the operators, adding them to an array called ansOps         
            if(answer.charAt(charPos) == '+'){
               ansOps[charPos] = 1;
               charPos--;
            }
            else if(answer.charAt(charPos) == '-'){
               ansOps[charPos] = 2;
               charPos--;
            }
            else if(answer.charAt(charPos) == '*'){
               ansOps[charPos] = 3;
               charPos--;
            }
            //This case handles the numbers
            else if(Character.isDigit(answer.charAt(charPos))){
               int ansHunds = 0, ansTens = 0, ansUnits = 0;
               
               //These two nested "if"s handle the cases where the number is 2 or 3 digits long
               if(charPos > 0 && Character.isDigit(answer.charAt(charPos-1))){
                  
                  if(charPos > 1 && Character.isDigit(answer.charAt(charPos-2))){
                     ansHunds = Character.getNumericValue(answer.charAt(charPos-2));
                  }
                  
                  ansTens = Character.getNumericValue(answer.charAt(charPos-1));
               }
               
               ansUnits = Character.getNumericValue(answer.charAt(charPos));
               
               ansNums[charPos] = ansHunds * 100 + ansTens * 10 + ansUnits;
               //System.out.println("ansHunds = " + ansHunds + ", ansTens = " + ansTens + ", ansUnits = " + ansUnits + ", ansNums["+(charPos+1)+"] = " + ansNums[(charPos+1)]);
               //These "if"s move the charPos to avoid double-counting 2- and 3- digit numbers
               if(ansHunds != 0){
                  charPos -=3;
               }
               else if(ansTens != 0){
                  charPos -=2;
               }
               else{
                  charPos--;
               }
                              
               ansHunds = 0; ansTens = 0;
            }
            //This handles the case where something other than a number of valid operator has been entered. It prompts the user to re-enter their answer. 
            //else{
            //   System.out.print("Error: " + names[i] + " " + answers[i].charAt(charPos) + " is an invalid character. Remember not to put any spaces! Try entering it again: ");
            //   answers[i] = sc.nextLine();
         }

      int total = ansNums[0];
      int nextNum = 0;
      int counterNums = 0;
      int counterOps = 0;
      
      if(ansOps[0] != 2){
         for(int i = 0; i < ansNums.length; i++){
            if(total == 0){
               total = ansNums[i];
               counterNums = i +1;
            }
            else if(i == 0){
               counterNums = i+1;
            }
         }
      } 
     
      //System.out.println("The total is " + total + ", and the index is " + counterNums);

      while(counterOps < ansOps.length){
         
         while(counterNums < ansNums.length && counterOps < ansOps.length){
            
            if(ansNums[counterNums] == 0){
               counterNums++;
               //System.out.println("Nums counter is " + counterNums + ", nextNum is " + nextNum + ", the Ops counter is " + counterOps + ", the total is " + total);
            }
            else{
               nextNum = ansNums[counterNums];
               //System.out.println("Nums counter is " + counterNums + " and nextNum is " + nextNum + ". The Ops counter is " + counterOps + ", the total is " + total);

               if(ansOps[counterOps] == 0){
                  counterOps++;
                  //System.out.println("Nums counter is " + counterNums + ", nextNum is " + nextNum + ", the Ops counter is " + counterOps +  ", the total is " + total);
               }
               else if(ansOps[counterOps] == 1 ){
                  total += nextNum;
                  counterNums++;                 
                  counterOps++;
                  //System.out.println("Nums counter is " + counterNums + ", nextNum is " + nextNum + ", the Ops counter is " + counterOps + ", the total is " + total);
               }  
               else if(ansOps[counterOps] == 2){
                  total -= nextNum;
                  counterNums++;
                  counterOps++;
                  //System.out.println("Nums counter is " + counterNums + ", nextNum is " + nextNum + ", the Ops counter is " + counterOps + ", the total is " + total);
               }
               //else if(ansOps[counterOps] == 3){
                  //total = total * nextNum;
                  //counterNums++;
                  //counterOps++;
               //}
               else{
                  //System.out.println("There's something wacky in your ansOps array here: counterOps = " + counterOps + ", counterNums = " + counterNums);// + ", ansOps here is " + ansOps[counterOps] + ", and ansNums here is " + ansNums[counterNums]);
                  counterOps++;
                  counterNums++;
               }
                  
               //System.out.println("The total is now " + total);
               //System.out.println("The Ops counter is: " + counterOps + ", and the Nums counter is: " + counterNums);
               
            }
         }
         counterOps++;
      }
      //System.out.println("The total is: " + total);
      //System.out.println("The add method is about to end.");
      return total;
   }//ends ReadAndAdd method
   
   //This method scores the Numbers game.
   public static int ScoreNumbers(String name, int target, int answer){
      int gameScore = 0;
      
      if(answer == target){
         gameScore = 3;
         System.out.println("Great work, " + name + ", you cracked the code! You get 3 points.");
      }
      else if(answer > (target - 10) && answer < (target + 10)){
         gameScore = 1;
         System.out.println("Not bad, " + name + ", you nearly got it. You get 1 point.");
      }
      else{
         System.out.println("You didn't manage to crack the code. You'll do better next time.");
      }
      
      return gameScore;
   }//ends the ScoreNumbers method

   
   //This method is called when the players choose to end the game. It prints every player's score and determines and congratulates the winner(s).
   public static void WrapUp(String[] names, int[] totalScore){
      
      //This section finds the winner
      int max = totalScore[0];
      String[] winner = new String[names.length];
      
      for(int i = 0; i < totalScore.length; i++){
         if(totalScore[i] >= max ){
            winner[i] = names[i];
         }
      }
      //This section tells each player their socre
      for(int i = 0; i < names.length; i++){
         System.out.println(names[i] + ", you scored " + totalScore[i] + " points.");
      }
      //This section congratulates the winner(s)
      System.out.print("Congratulations ");
      for(int i = 0; i < winner.length; i++){
         if(!(winner[i] == null)){
            System.out.print(winner[i] + ", ");
         }
      }
      System.out.println("you are a Ciphermaster!");
      Credits();
      
   }//end WrapUp method
   
   //This method just prints a whole bunch of text wherein we thank people.
   public static void Credits(){
      System.out.println("Ciphermasters was created by Emma Carline and Esther Fraser in partial fulfillment of the requirements of");
      System.out.println("Dalhousie University's first year Computer Science class. The creators would like to thank Dr. B. McKay");
      System.out.println("for teaching them nearly everything they know about Java so far and inspiring them to learn the rest on");
      System.out.println("their own. Ciphermasters is based on the TV5 game show Des Chiffres et des Lettres(now with English versions,");
      System.out.println("the BBC's Countdown and ABC's Letters and Numbers. We hope you've enjoyed playing Ciphermasters!");
  }


   //This method prints the instructions
   public static void Instructions(){
      System.out.println("In Ciphermasters, you and your friends are code-making and code-breaking secret agents" + 
         "\nin a high-stakes race against time. Take turns hiding top secret information in the letters" +
         "\ngame, then go head-to-head against the Computer as you try to break through its security system." +
         "\n\tIn the letters game, one player will enter a word. (This is top-secret! Don't let the other players" +
         "\nsee it!) Then each other player will be shown a scrambled version. Unscramble it before time runs" +
         "\nout. Then the next player will enter a word and each other player will guess. The game ends when" +
         "\neach player has had a turn entering a word. One point is given for each word correctly unscrambled." +
         "\n\tIn the numbers game, all players are shown six 'building' numbers and a target number. Players" +
         "\nadd and subtract the building numbers to try to reach the target. When time's up, each player enters" +
         "\ntheir solution, the numbers and the operations they used to reach the target number. Players get 3" +
         "\npoints for getting straight to the target number and 1 point for getting within 10 of the target." +
         "\nCareful, in some levels, you might need to subtract!");
   }

   
}//end class
